1) что делает setState()
2) что такое Virtual DOM
3) как отрисовать массив элементов
4) разница между контролируемыми и неконтролируемыми компонентами
5) жизненный цикл компонента и его методы
6) какие основные реакт хук вы знаете и используете


1) что делает setState()

У каждого компонента в react js есть состояние, которое хранит в себе
Какие-то данные: и чтобы изменить эти данные необходимо вызвать
Функцию setState 
- метод setState следит за изменением состояния Компонента, а состояние в свою очередь является объектом и когда этот объект меняется (при вызове функции setState) компонент рендериться повторно и мы видим в браузере
Компонент с обновленными данными что позволяет нам напрямую не взаимодействовать с DOM деревом

2) что такое Virtual DOM

Виртуальное дом дерево это копия оригинального ДОМ дерева и предназначено оно для того чтобы сосредоточиться на логике взаимодействия с данными напрямую и не работать с ДОМ деревом

То есть мы можем изменения вносить в копию исходя из наших потребностей, а после этого применять эти изменения к реальному ДОМ: при этом присходит сравнение ДОМ дерева с его виртуальной копией, определяется разница и запускается перерисовка только тех компонентов, которые были изменены

Такой подход быстрее, так как операции с DOM очень дороги и тяжеловесны

3) как отрисовать массив элементов

Для этого используется функция map внутри которой мы пишем jsx разметку

Const numbers = [1,2,3,4,5]

Const listItems = numbers.map(n => {
	<li>n</li>
})

При этом реакт требует указывать ключ key для каждого элемента итерации,
Ключи помогают реакту идентифицировать какие элементы были изменены, добавлены или удалены

Ключи должны быть заданы элементом внутри массива, чтобы предоставить элементам постоянный идентификатор

КЛЮЧОМ НЕ ЖЕЛАТЕЛЬНО УКАЗЫВАТЬ ИНДЕКС ЭЛЕМЕНТА В МАССИВЕ

4) разница между контролируемыми и неконтролируемыми компонентами

Контролируемый компонент - является таким поскольку value этого input является состоянием, и мы отслеживаем функцию onChange и вручную перезаписываем значение:

Такие компоненты называют управляемыми поскольку процесс изменения значения полностью нам подконтролен 

Function App() {

Const [value, setValue] = useState('')
Const changeHandler = (e) => {
	setValue(e.target.value)
}

Return (
	<div>
		<input type="text" value={value} onChange={{e => changeHandler(e)}}/>
	</div>
)

}

Теперь неконтролируемые: здесь мы уже явно никак не управляем изменениями состояния, мы создаем ссылку ref и указываем ее в компоненте input, затем мы можем напрямую обращаться к свойствам компонента, например получить value

Function App(){
	const inputRef = useRef()

	Const getInputValue = () => {
		return inputRef.current.value
	}

	return (
		<div>
			<input type="text" ref={inputRef}/>
		</div>
	)
}

5) жизненный цикл компонента и его методы

- initialisation инициализация: на этом этапе компонент реакт готовит установку начального состояния и параметров по умолчанию
- mounting монтирование: компонент реакт готов для монтирования в ДОМ дерево браузера. Этот этап охватывает методы жизненного цикла такие как 
	- component will mount
	- component did mount
- updation обновление: на этом этапе компонент обновляется двумя способами
	- отправляя новые свойства
	- обновляя состояние 
Этот этап охватывает методы жизненного
		- should component update
		- component will update
		- component did update
- unmounting размонтирование: на этом этапе компонент не нужен и удаляется из ДОМ браузера
	- включает метод жизненного цикла component will unmount

6) какие основные реакт хук вы знаете и используете