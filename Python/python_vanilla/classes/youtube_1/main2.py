if __name__ == '__main__':
    print('hello - Инициализатор __init__ и финализатор __del__!')

    # __init__
    # 1 - создание объекта в памяти устройства __new__
    # 2 - далее __init__

    class Example:
        atr_1 = 1
        atr_2 = 2

        # def __init__(self, x=0, y=0):  # 3
        # def __init__(self, a, b):  # 1
        def __init__(self, x, y):  # 2
            print("__init__")
            # self.x = a
            self.x = x
            # self.y = b
            self.y = y

        # в конце (видео) - финализатор
        def __del__(self):
            print("Удаление экземпляра: " + str(self))
        # интерпретатор имеет сборщик мусора, и как только
        # объекты не нужны - он их удаляет (поэтому данный)
        # метод отработает без вызова, автоматически, после
        # окончания программы

        # пока на какой-либо объект ведет хотя бы одна внешняя ссылка
        # он нужный, если нет - то можно удалять

        def set_coords(self, x, y):
            self.x = x
            self.y = y

        def get_coords(self):
            return self.x, self.y

    ex = Example(1, 2)
    # если мы хотим создавать экземпляры класса
    # без аргументов то в __init__ надо прописать их заранее
    # def __init__(self, x = 0, y = 0):
    # тогда можно написать ex = Example(), или Example(1)
    # или Example(y = 3)

    print(ex.__dict__)
    # здесь мы видим что имена атрибутов
    # {'x': 1, 'y': 2} - берутся из self __init__

    # # __del__
    # автоматически вызывается перед уничтожением экземпляра класса
