https://www.youtube.com/watch?v=Od5H_CiU2vM&list=PL6DxKON1uLOEmw7Jkl_0Ac6wJ-jOjpKrQ&index=3

npx create-react-app . --template typescript

npm install @reduxjs/toolkit react-redux @types/react-redux

Самый базовый часто встречающийся case - это получение каких-то данных,
Обработка ошибки и обработка загрузки этих данных

Получение данных от сервера это асинхронный процесс, поэтому нужно делать
Асинхронный action creator - по классике асинхронные actions создаются
С помощью middleWare redux-thunk, и в redux-toolkit redux-thunk идет
Уже под капотом и его вручную подключать не надо

Для того чтобы этим функционалом пользоваться, мы из action creator а
Не возвращаем сразу action, а мы возвращаем другую функцию, которая
Аргументом принимает dispatch, и уже из этой функции мы будем
Производить какие-то асинхронные действия

############################################################

RTK query

const {data: posts, error, isLoading} = postAPI.useFetchAllPostsQuery(limit)

Error && isLoading обрабатываются автоматически

Мы можем не заботиться о том что запросы продублируются и когда мы используем хук
Мы можем быть уверены, что лишний запрос выполняться не будет и мы возьмем эти
Данные из хранилища и будем использовать там где нам необходимо

Данные закэшируются и обновятся при необходимости

Выпадающие списки с данными, которые подгружаются асинхронно: эти списки
Используются в приложении например повсеместно, и чтобы получить данные
Для этих списков нам достаточно использовать хуки и быть уверенным
Что у нас не происходит лишних запросов 

Но если данные по какой-то причине необходимо перезаписать - есть функция refetch

longPulling - это когда в определенный промежуток времени мы получаем обновленные данные

Это можно использовать в чатах, уведомлениях: своего рода аналог websocket

- и если на сервере появились какие-то новые данные, мы их увидим (обновленные)

############################################################

Sudo npm install -g json-server (GLOBALLY)

json-server --watch db.json --port 5000

