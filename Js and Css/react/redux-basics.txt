https://www.youtube.com/watch?v=5Qtqzeh5FeM&list=PL6DxKON1uLOHsBCJ_vVuvRsW84VnqmPp6&index=1

Playlist

npm i redux react-redux
npm i redux-thunk
npm i redux-devtools-extension

После того как модули установились необходимо создать store

Store это объект, который содержит несколько методов, а именно
- получить состояние getState
- изменить состояние с помощью dispatch
- и подписаться на изменения в состоянии

Создается store с помощью функции createStore()

Первым параметром store принимает reducer
(Всего два параметра)

Reducer = это простая JS функция, которая принимает два параметра
Состояние и action

Action это JS объект с обязательным полем type (по этому полю мы будем
Определять как состояние будет изменяться, и также в action можно передать любое количество данных: чаще всего их передают в поле под названием payload)

Состояние - это некий объект или массив, или может быть даже примитивное значение, которое хранит данные

Изменение состояния - изначально состояние в РЕДАКСЕ является неизменяемым, то есть мы каждый раз должны возвращать новый объект

APP 

import React from 'react';
import {useDispatch, useSelector} from "react-redux";

const App = () => {
    const dispatch = useDispatch()
    const cash = useSelector(state => state.cash)

    const addCash = (cash) => {
        dispatch({type:"ADD_CASH", payload: cash})
    }

    const getCash = (cash) => {
        dispatch({type:"GET_CASH", payload: cash})
    }

    return (
        <div className={'app'}>
            <div style={{fontSize:"3rem"}}>{cash}</div>
          <div style={{display: "flex"}}>
              <button onClick={() => addCash(Number(prompt()))}>Пополнить счет</button>
              <button onClick={() => getCash(Number(prompt()))}>Снять со счета</button>
          </div>
        </div>
    );
};

export default App;

Index js

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import {createStore} from "redux";
import {Provider} from "react-redux";

const defaultState = {
    cash: 0
}

const reducer = (state = defaultState, action) => {
    switch (action.type) {
        case "ADD_CASH":
            return {...state, cash: state.cash + action.payload}
        case "GET_CASH":
            return {...state, cash: state.cash - action.payload}
        default:
            return state
    }
}

const store = createStore(reducer)

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <Provider store={store}>
        <App/>
    </Provider>
);

Есть dispatch в него передается action - то как action будет изменять состояние определено внутри reducer - в свою очередь reducer это чистая функция, которая принимает состояние
И action и всегда возвращает новый объект состояния

Этот reducer передается в store, а store с помощью provider передается в Реакт компоненты,
В которых мы как раз это состояние и используем



Пример с разделением reducers

########################################################################

src/Index js

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import {Provider} from "react-redux";
import {store} from "./store";

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <Provider store={store}>
        <App/>
    </Provider>
);

-->

Src/Store/index.js

import {createStore, combineReducers} from "redux";
import {cashReducer} from "./cashReducer";
import {customerReducer} from "./customerReducer";

const rootReducer = combineReducers({
    cash: cashReducer,
    customer: customerReducer
})

export const store = createStore(rootReducer)

-->

Cash, customer reducers (примерно тоже самое )

const defaultState = {
    cash: 0
}

export const cashReducer = (state = defaultState, action) => {
    switch (action.type) {
        case "ADD_CASH":
            return {...state, cash: state.cash + action.payload}
        case "GET_CASH":
            return {...state, cash: state.cash - action.payload}
        default:
            return state
    }
}



const defaultState = {
    customers: []
}

export const customerReducer = (state = defaultState, action) => {
    switch (action.type) {
        case "ADD_CUSTOMER":
            return {...state, cash: state.cash + action.payload}
        case "GET_CUSTOMER":
            return {...state, cash: state.cash - action.payload}
        default:
            return state
    }
}

-->

В APP 

const cash = useSelector(state => state.cash.cash)

Вместо сразу же обращения к cash - теперь пишем cash, cash.cash

########################################################################

Для того чтобы использовать middleware вместе с инструментами разработчика нужно установить модуль: он называется npm i redux-devtools-extension

import { composeWithDevTools } from "redux-devtools-extension";

const rootReducer = combineReducers({
    cash: cashReducer,
    customer: customerReducer
})

export const store = createStore(rootReducer, composeWithDevTools())

И поехали debugging

########################################################################

Более чистая версия кода

const defaultState = {
    cash: 0
}

const ADD_CASH = "ADD_CASH"
const GET_CASH = "GET_CASH"

export const cashReducer = (state = defaultState, action) => {
    switch (action.type) {
        case ADD_CASH:
            return {...state, cash: state.cash + action.payload}
        case GET_CASH:
            return {...state, cash: state.cash - action.payload}
        default:
            return state
    }
}

export const addCashAction = (payload) => ({type: ADD_CASH, payload})
export const getCashAction = (payload) => ({type: GET_CASH, payload})

-->

import {addCustomerAction, removeCustomerAction} from "./store/customerReducer";

    const removeCustomer = (customer) => {
        // dispatch({type: "REMOVE_CUSTOMER", payload: customer.id}) - так больше вероятность ошибки
        dispatch(removeCustomerAction(customer.id))
    }

########################################################################

Самый простой способ работы с асинхронным кодом в redux

npm i redux-thunk

Подключаем

import {createStore, combineReducers, applyMiddleware} from "redux";
import {cashReducer} from "./cashReducer";
import {customerReducer} from "./customerReducer";
import { composeWithDevTools } from "redux-devtools-extension";
import thunk from "redux-thunk";

const rootReducer = combineReducers({
    cash: cashReducer,
    customers: customerReducer
})

export const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))

Без middleware не обойтись (npm i redux-devtools-extension)



Redux thunk это middleWare, который позволяет внутри каких-то вообще сторонних функций
Использовать dispatch