https://www.youtube.com/watch?v=jn-L1SFYdIc

npm i mobx mobx-react-lite

Приставка lite означает что мы будем пользоваться функциональными компонентами,
Если вы хотите пользоваться классовыми компонентами, то эту приставку lite
Надо удалить

makeAutoObservable параметром принимает контекст this (текущего класса)

####################################################################

Базовый пример со счетчиком 

src/store/counter.js

import {makeAutoObservable} from "mobx";

class Counter {
    count = 0
    // здесь внутри класса мы создаем переменные, которые будут являться состоянием

    constructor() {
        makeAutoObservable(this) // параметром принимает контекст текущего класса
    }

    // любая созданная функция это аналог action, которое это состояние будет изменять

    // !!! в отличие от REDUX состояние в MOBX является изменяемым и мы не должны каждый раз
    // возращать новый объект

    increment(){
        this.count = this.count + 1
        console.log('increment', this.count)
    }

    decrement(){
        this.count = this.count - 1
        console.log('decrement', this.count)
    }
}

Src/counter.jsx

(Без observer - рендера в DOM не будет)

import React from 'react';
import './App.css'
import counter from "./store/Counter";
import {observer} from "mobx-react-lite";

const Counter = observer(() => {
    return (
        <div className='counter'>
            {"Count = " + counter.count}
            <div className='btns'>
                <button onClick={() => counter.increment()} className='btn'>+</button>
                <button onClick={() => counter.decrement()} className='btn'>-</button>
            </div>
        </div>
    );
});

export default Counter;

####################################################################

В случае с mobX не стоит упускать ключи при map (v-for)