// todo *** Backend function - preprocess - сама функция
export const preprocess = () =>{

    function compare(a, b) {
        if (a.sort < b.sort) return -1;
        if (a.sort > b.sort) return 1;
        return 0;
    }
    function sortFields (array) {
        array.sort(compare);
        array.forEach(arrItem => {if (arrItem.groups) sortFields(arrItem.groups)})
        return array;
    }
    const textToBool = (val)=>{
        let bool = false;
        if (typeof val !== "boolean" && typeof val !== 'number') {
            if(val === "Да") bool = true
            if(val === "Нет") bool = false
            if(val === "1") bool = true
            if(val === "0") bool = false
        }

        if (typeof val === 'number') bool = val !== 0
        if (typeof val ==="boolean") bool = val
        return bool;
    }
    function getNormalSertDate(date){
        let ar = date.split('.');
        return ar[0].replace(/[-:T]*/gm,"");
    }
    function currentTime(){
        let a = new Date();
        let year = a.getFullYear();
        let month = addZero(a.getMonth()+1);
        let day = addZero(a.getDate());
        let hours = addZero(a.getHours());
        let min = addZero(a.getMinutes());
        let sec = addZero(a.getSeconds());
        function addZero(val){
            if (val < 10) val = "0" + val;
            return val;
        }

        return year.toString()+month.toString()+day.toString()+hours.toString()+min.toString()+sec.toString()
    }
    function preBools (item){
        if (item.groups === undefined && item._ssylka === undefined) item._ssylka = null
        if (item.checked)item.checked = textToBool(item.checked)
        if (item.editable) item.editable = textToBool(item.editable)
        if (item.required) item.required = textToBool(item.required)
        if (item.visible) item.visible = textToBool(item.visible)
        if (item.required) item.required = textToBool(item.required)
        if (typeof(+item.type) === 'number') item.type = textToBool(item.type);
        if (item.groups) item.groups.forEach(itemGroup => preBools(itemGroup))

        return item;
    }
    const formatInputDateFilter = (date) =>{
        if (!date) return "";
        const [day, month, year] = date.split('.');
        let result_date
        if (year && day && month) result_date = year + "-" + day + "-" + month
        else result_date = date;
        return result_date.replace(/-/gm, "");
    }
    const formatDateIn1C = (date) => {
        if (date) return formatInputDate(date, ".", "-").replace(/-/gm,"") + "000000"
        else return "00010101000000"
    }
    const formatTimeIn1C = (time) =>{
        if (time) {
            let clock = time.replace(/:/gm,"");
            let j = 6-clock.length;
            for(let i = 0; i < j; i++){
                clock+='0';
            }
            return "00010101" + clock
        } else {
            return '00010101000000'
        }
    }

    function formatInputsRepeater(item, child_table){
        if(item.type && item.type !== 'table'){
            if(!item.value){
                // this.$set(item,"value","");
                item['value'] = "";
            }
            if(!item._ssylka){
                item['_ssylka'] = null;
            }
            if(item.type === 'select'){
                item["list_values"] = [];
            }
            if(child_table){
                item['child_table'] = true;
            }
            if(item.field_color){
                item.field_color = JSON.parse(item.field_color);
            }
        }
        if(item.type && item.type == "table"){
            if(!item._ssylka){
                item["_ssylka"] = null;
            }
            if(!item.selected_row){
                item['selected_row'] = null;
            }
            if(item.groups){
                for(var i = 0; i < item.groups.length; i++){
                    formatInputsRepeater(item.groups[i], true);
                }
            }
        }
        if(item.groups && item.type != "table"){
            for(var i = 0; i < item.groups.length; i++){
                formatInputsRepeater(item.groups[i], false);
            }
        }
    }

    const formatInputs = (inputs) => {
        if (inputs){
            for(let i in inputs){
                formatInputsRepeater(inputs[i], false);
            }
        }
        return inputs;
    }
    const arrayRoleToString = (array) => {
        if(typeof array == 'string')
            return array
        else
            return Array.from(array, x => x.role).join();
    }
    const formatInputDate = (date, separatorOne, separatorTwo) =>{
        if (typeof date == 'object') date = objectToDate(date)

        const [day, month, year] = date.split(separatorOne); // .
        let result_date

        if (year && day && month) result_date = year + separatorTwo + month + separatorTwo + day // -
        else result_date = date;

        return result_date;
    }

    const objectToDate = (date, time = false) =>{
        if (!date) return "";
        if (typeof date == 'object') date = date.date
        if (date === '2001-01-01 00:00:00.000000') return ""
        if (date === '0001-01-01 00:00:00.000000') return ""
        if (date === '0001-01-01T00:00:00') return ""
        if (date === '2001-01-01T00:00:00') return ""
        if (time) date = date.replace(/[0-9]*-[0-9]*-[0-9]*[ T]/gm, "");
        date = date.replace(/[ T][0-9:.]*/gm,"")
        return date;
    }
    const formatDateAndTime = (date) => {
        if (!date) return "";
        let normal_date = formatInputDate(date, '-', '.');
        let normal_time = objectToDate(date, true);
        return `${normal_date} ${normal_time}`;
    }
    const main = (array) => {
        if (!array) return
        array = sortFields(array);
        array.forEach(arrayItem => preBools(arrayItem))
        return array;
    }

    return {
        main,
        formatTimeIn1C,
        formatDateIn1C,
        formatInputDateFilter,
        formatInputDate,
        formatTabs,
        formatInputs,
        textToBool,
        objectToDate,
        currentTime,
        arrayRoleToString,
        getNormalSertDate,
        formatDateAndTime
    };

}
