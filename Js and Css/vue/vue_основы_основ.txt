######################################

1) vue это JS фрэймворк, который ставиться из npm

Декларативная отрисовка: vue расширяет стандартный HTML синтаксисом шаблонов, который позволяет
описывать HTML вывод на основе состояния JS

Реактивность: vue автоматически отслеживает JS состояние и его изменения и эффективно обновляет
DOM когда это происходит 

VUE - удобная вещь: достаточно вспомнить примеры из реальной практики: компоненты, модалки, vuex и так далее

2) Single-File Components

однофайловые компоненты - объединяет логику (JS), шаблон (HTML), стили (CSS) в один файл и изолирует ее от внешнего 
вмешательства (инкапсулирует ее).

3) API Styles
- Options API (ООП подход)
здесь мы описываем логику компонента используя объект с вариантами "data, methods, mounted" и так далее
export default {

- Composition API (функциональный подход)
здесь мы описываем логику компонента импортируя функции API
<script setup>

######################################

Проход по верхам функционала с options и composition API, а также с html и sfc
https://vuejs.org/tutorial/#step-1

Различные примеры с options и composition API, а также с html и sfc
https://vuejs.org/examples/#hello-world

######################################

быстый старт

- npm init vue@latest инициализируем все необходимо едля vue (последнюю версию) 3.2.45 - на момент записи
- везде пишем NO

> cd <your-project-name>
> npm install
> npm run dev

When you are ready to ship your app to production, run the following:

> npm run build

Пара моментов для этой версии:

Расширение Volar:

The recommended IDE setup is Visual Studio Code + Volar extension. 
If you use other editors, check out the IDE support section.

2) начало полноценных объяснений vue 

https://vuejs.org/guide/essentials/application.html#the-root-component

- Every Vue application starts by creating a new application instance with the createApp function
- каждое vue приложение начинается с добавления новой сущности приложения, а именно функции createApp

- The object we are passing into createApp is in fact a component. Every app requires a "root component" 
that can contain other components as its children.
- объект,  который мы кладем сущность CreateApp по сути - компонент. Каждое приложение строго нуждается в
"корневом компоненте", который будет содержать в себе другие компоненты, как детей

Это к тому что необязательно называть App именно App, и мы просто кладем компонент в createApp - вот и начало
vue проекта после npm магии
вот
import { createApp } from 'vue'
import App from './App.vue'

createApp(App).mount('#app')

или

const app = createApp(App)
app.mount('#app')

An application instance won't render anything until its .mount() method is called. 
It expects a "container" argument, which can either be an actual DOM element or a selector string:

Без привязки к DOM элементу мы не отрендерим приложение = сделать это можно createApp(App).mount('#app')

где

    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>

в index.html в корне проекта

PS:

The content of the app's root component will be rendered inside the container element. 
The container element itself is not considered part of the app.

The .mount() method should always be called after all app configurations 
and asset registrations are done. 

пример на stackoverflow 
https://stackoverflow.com/questions/71826414/vue-component-is-not-a-function-migrating-from-vue-2-to-vue-3-version

Раздел App Configurations "начало полноценных объяснений vue" - замануха на более глубокие моменты

Основное 

Make sure to apply all app configurations before mounting the app!

Multiple application instances

Можно создать несолько VUE приложений, а не ограничиваться одним 

const app1 = createApp({
  /* ... */
})
app1.mount('#container-1')

const app2 = createApp({
  /* ... */
})
app2.mount('#container-2')

ВАЖНЫЙ МОМЕНТ:

If you are using Vue to enhance server-rendered HTML and only need Vue to control specific 
parts of a large page, avoid mounting a single Vue application instance on the entire 
page. Instead, create multiple small application instances and mount them on the 
elements they are responsible for.

Если вы используете Vue для усиления HTML, который был отрендерен на стороне сервера, и это
использование только для контроля специальных частей большой страницы, ИЗБЕГАЙТЕ 
подключения VUE приложения ко всей странице. Вместо этого создайте несколько
маленьких приложений-сущностей и привяжите их к элементам, за которые они
будут отвечать.

В общем - инкапсулируйте.

######################################

Используемый во VUE и основанный на HTML синтаксис шаблонизации позволяет привязывать rendered DOM к 
underlying (лежащей "под", скрытой) сущности компонента (JS). 

Vue компилирует шаблоны в высоко оптимизированный JS код: благодаря системе реактивности, VUE может
грамотно организовать бесповторный рендер компонентов, чтобы изменения в DOM были минимальны при
изменении состояния VUE приложения.
