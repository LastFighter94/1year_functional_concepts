ЗАЧЕМ ЕГО ИСПОЛЬЗОВАТЬ?

Когда компонент разрастается не всегда удается уловить логическую связь, поддержка
и читаемость кода ухудшается, компонент разрастается до 1000 строк и что-то в нем
найти становится крайне сложно, особенно если ты раньше с этим компонентом не
работал

хотелось бы иметь возможность иметь такой фунционал, при котором мы можем сделать декомпозицию,
а также все логические куски держать рядом

преимущест у composition API достаточно много!

данные и логика по работе с этими данными - находятся рядом (когда приложение очень
большое, это очень облегчает его поддержку и работу над ним)



###########################################

Есть некоторая функция setup, которая параметром принимает props

в компоненте 

export default {
    setup(props){

    }
}

для того чтобы сделать переменную реактивной, нужно из vue импортировать функцию ref

import {ref} from 'vue'

функция ref принимает значение, внизу проинициализировали переменную likes = 0

    setup(props){
        const likes = ref(0)

        return {
            likes
        }
    }

все то что мы вернем из функции setup будет доступно в шаблоне

можно динамески изменять количество лайков

Базовый пример

<button @click="addLike">add like</button>

    setup(props){
        const likes = ref(0)
        console.log(likes)
        const addLike = () => {
            likes.value += 1
        }

        return {
            likes,
            addLike
        }
    }

###########################################

В JS примитивы сравниваются по значению - а объекты по ссылкам