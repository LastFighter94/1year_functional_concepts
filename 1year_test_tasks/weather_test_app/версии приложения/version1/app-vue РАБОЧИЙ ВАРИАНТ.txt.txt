<template>
  <div class="wrapper">
    <div class="search-box">
      <input 
        type="text" 
        placeholder="Search..." 
        v-model="query"
        @keyup.enter="getResponse"
      >
      <button @click="getResponse">Search</button>
    </div>

    <div 
      class="app-wrapper"
      :class="data.main.temp > 16 ? 'warm' : 'cold'"
      v-if="data !== null && data !== undefined && data.cod === 200"
    >
      <div class="info-box">
        <h1>{{ data.name}}</h1>

        {{ data.sys.country }}

        <div class="info-box-coords">
          <p>X: {{ data.coord.lon }}</p>
          <p>Y: {{ data.coord.lat }}</p>
        </div>

        <div class="info-box-temp">
          <h1>Feels like {{ data.main.temp }} C</h1>
        </div>

        <div class="info-box-weather">
          <div>
            <h1>{{ data.weather[0].main}}</h1>
            <p>{{ data.weather[0].description}}</p>  
          </div>

          <div>
            <h1>Pressure</h1>
            <p>{{ data.main.pressure}}</p>
          </div>
        
          <div>
            <h1>Humidity</h1>
            <p>{{ data.main.humidity}}</p>
          </div>
        </div>
      </div>
    </div>

    <div class="error-box" v-else>
        <h1>Not found or incorrect details</h1>
    </div>
  </div>
</template>

<script lang="ts">
import { defineComponent, ref } from 'vue';

export default defineComponent({
  name: 'App',
  setup(){
    const url_base = 'https://api.openweathermap.org/data/2.5/'
    const api_key = '91dab5538778437b161bcd49f5365764'

    const query = ref<string>('')
    const data = ref<any>(null)

    const getResponse = async () => {
      if (query.value !== ''){
        const res = await fetch(
          `${url_base}weather?q=${query.value}&units=metric&APPID=${api_key}`
        )
        data.value = await res.json()
        query.value = ''
      }
    }

    return { query, getResponse, data }
  }
});
</script>

<style lang="scss">
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: #2c3e50;
}

.wrapper {
  display: flex;
  flex-direction: column;
  margin: 20px;
  align-items: center;
}

.app-wrapper {
  border-radius: 15px;
  background-size: cover;
  background-position: center;
  transition: 0.4s;
}

.cold {
  background-image: url('./assets/cold-bg.jpg');
}

.warm {
  background-image: url('./assets/warm-bg.jpg');
}

.search-box,
.error-box,
.info-box {
  padding: 10px;
  text-align: center;
}

.search-box {
  input, button {
    padding: 5px;
    border-radius: 5px;
    font-size: 1rem;
  }

  input {
    margin-right: 10px;
    transition: 0.4s;
  }

  input:focus {
    background-color: aliceblue;
    outline: none;
  }

  button {
    background-color: aliceblue;
  }

  button:active {
    transform: scale(0.98);
  }
}

.error-box {
  h1 {
    font-size: 1.5rem;
  }
}

.info-box {
  h1 {
    font-size: 2rem;
  }

  &-coords {
    p {
      font-style: italic;
    }
  }

  &-temp {
    h1 {
      font-size: 1.2rem;
    }
  }

  &-weather {
    margin-top: 10px;
    display: flex;
    gap: 20px;

    div {
      padding: 10px;
      border-radius: 10px;
      background-color:rgba(255, 255, 255, 0.85);
      border-radius: 16px;
      box-shadow: 3px 6px rgba(0, 0, 0, 0.25);

      h1 {
        font-size: 1.3rem;
      }
    }
  }
}

// media-querys ...

</style>